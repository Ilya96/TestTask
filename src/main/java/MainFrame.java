import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Илья
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        	DefaultMutableTreeNode top = new DefaultMutableTreeNode(new IconData(null, null, "Root")); 
	        fileSystem = FileSystems.getDefault();
                LoadXML("conf.xml");
                myFileSystem =new File(workpath+"MyFileSystem");
                greenPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.green);
                showStatistics = new Statistics();
                if(!myFileSystem.exists())
                    myFileSystem.mkdir();
                mainNode = new DefaultMutableTreeNode(new IconData(null, null, new FileNode(myFileSystem)));;
		top.add(mainNode);
		mainNode.add(new DefaultMutableTreeNode(new Boolean(true)));
		m_model = new DefaultTreeModel(top);
                
		m_tree = new JTree(m_model);
                
                jScrollPane1.setViewportView(m_tree);
 
		m_tree.addTreeExpansionListener(new DirExpansionListener());
 
		m_tree.addTreeSelectionListener(new DirSelectionListener());
                                     
                jList1.addListSelectionListener(new MyListSelectionListener());
                
                jList1.setModel(new DefaultListModel());
 
		m_tree.getSelectionModel().setSelectionMode(
				TreeSelectionModel.SINGLE_TREE_SELECTION);
 
		m_tree.setShowsRootHandles(true);
		m_tree.setRootVisible(false);
 
		m_tree.setEditable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        m_tree = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        m_display = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyFileSystem");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        m_tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        m_tree.setName(""); // NOI18N
        jScrollPane1.setViewportView(m_tree);

        jButton1.setText("Добавить файл");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Добавить папку");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Удалить");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Текст файла:");

        jLabel3.setText("Поиск файла:");

        jLabel4.setText("Имя файла/папки:");

        jScrollPane2.setViewportView(jList1);

        jButton4.setText("Обновить");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Сохранить");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("По названию");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("По содержимому");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(jTextPane1);

        jButton8.setText("Найти в тексте");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Посмотреть статистику");
        jButton9.setActionCommand("Посмотреть статистику данной директории");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("По Glob");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(m_display)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jButton6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton7)))
                            .addGap(69, 69, 69)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 133, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)))
            .addComponent(jScrollPane4)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(m_display, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(1, 1, 1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadXML(String str) {
      try 
        {     
          // Создание парсера документа
          DocumentBuilder dBuilder =
          DocumentBuilderFactory.newInstance().newDocumentBuilder();
          // Чтение документа из файла
          Document doc = dBuilder.parse(new File(str));
          // Нормализация документа
          doc.getDocumentElement().normalize();
          // Получение списка элементов с именем book
          NodeList nlBooks = doc.getElementsByTagName("conf");
          Node elem = nlBooks.item(0);
          NamedNodeMap attrs = elem.getAttributes();
          expansion = attrs.getNamedItem("expansion").getNodeValue();
          charset = attrs.getNamedItem("charset").getNodeValue();
          workpath = attrs.getNamedItem("workpath").getNodeValue();
        }
      catch (ParserConfigurationException | SAXException | IOException e) {}
        }    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        File mkFile;
        DefaultMutableTreeNode mkNode, node;
        FileNode fileNode;
        if(selectedFile!=null)
        //System.out.print(selectedFile.getPath());
            if(selectedFile.isDirectory())
            {
                mkFile = new File(selectedFile.getPath(),jTextField1.getText()+"."+expansion);
                if(!mkFile.exists())
                    try {
                        mkFile.createNewFile();
                        writeFile(mkFile, jTextPane1.getText());
                        mkNode = (DefaultMutableTreeNode) (treePath.getLastPathComponent());
                        fileNode = new FileNode(mkFile);
                        node = new DefaultMutableTreeNode(new IconData(null, null, fileNode));
                        mkNode.add(node);
                        m_model.reload(mkNode);
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                else
                    JOptionPane.showMessageDialog(null,"В данной деректории уже существует файл с таким названием и расширением!");
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        File mkFile;
        DefaultMutableTreeNode mkNode, node;
        FileNode fileNode;
        if(selectedFile!=null)
            if(selectedFile.isDirectory())
            {
                mkFile = new File(selectedFile.getPath(),jTextField1.getText());
                if(!mkFile.exists())
                {        
                    mkFile.mkdir();
                    mkNode = (DefaultMutableTreeNode) (treePath.getLastPathComponent());
                    fileNode = new FileNode(mkFile);
                    node = new DefaultMutableTreeNode(new IconData(null, null, fileNode));
                    mkNode.add(node);
                    node.add(new DefaultMutableTreeNode(new Boolean(true)));
                    m_model.reload(mkNode);
                }
                else
                    JOptionPane.showMessageDialog(null,"В данной директории уже существует папка с таким названием!");
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:        
                    if(treePath!=null)
                    {
        		DefaultMutableTreeNode node = getTreeNode(treePath);
                        if(selectedFile==myFileSystem)
                            JOptionPane.showMessageDialog(null,"Нельзя удалять корневую папку файловой системы!");
                        else
                        {
			    selectedFile.delete();
                            m_model.removeNodeFromParent(node);
                            treePath=null;
                            selectedFile=null;
                            ((DefaultListModel)jList1.getModel()).removeAllElements();
                        }  
                    }
                        //node.removeFromParent();
                        //m_tree.removeSelectionPath(treePath);            
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        FileNode fileNode = getFileNode(mainNode);
        fileNode.expand(mainNode);
        m_model.reload(mainNode);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if((selectedFile!=null)&&selectedFile.isFile())
            writeFile(selectedFile, jTextPane1.getText());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        ((DefaultListModel)jList1.getModel()).removeAllElements();
        searchFilesByName(myFileSystem, (DefaultListModel)jList1.getModel(), jTextField2.getText());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        ((DefaultListModel)jList1.getModel()).removeAllElements();
        searchFilesByContent(myFileSystem, (DefaultListModel)jList1.getModel());
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:     
        String one = jTextPane1.getText();
        String two = jTextField2.getText();
        for(int i=0;i<one.length();i++)
            if(one.charAt(i)=='\r')
            {
                one = removeCharAt(one, i);
                i--;
            }
        jTextPane1.setText(one);
        for(int i=0;i<one.length()-two.length()+1;i++)
        {
            int j;
            for(j=0;(j<two.length())&&(one.charAt(j+i)==two.charAt(j));)
                j++;
            if(j==two.length())
            {
                try {
                    jTextPane1.getHighlighter().addHighlight(i, i+j, greenPainter); 
                } 
                catch (BadLocationException ble) { 
                } 
            }
                
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        //countWord(selectedFile
        globalCount=0;
        showStatistics.getModel().setRowCount(0);
        statistics(myFileSystem);
        showStatistics.setTitle("Общее количество слов в рабочей директории: "+globalCount);
        showStatistics.setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        ((DefaultListModel)jList1.getModel()).removeAllElements();
        pathMatcher = fileSystem.getPathMatcher("glob:"+jTextField2.getText());
        searchFileByGlob (myFileSystem, (DefaultListModel)jList1.getModel());
    }//GEN-LAST:event_jButton10ActionPerformed

    /*void  (File Folder, DefaultListModel listMODEL, String str) { 
        
	//Path path = Paths.get("D:/cp/PathMatcherExample.java");
        //
    }*/
    
    void searchFileByGlob(File Folder, DefaultListModel listMODEL) { 
        File[] files = Folder.listFiles();
        for(File file:files)
        {
            if(pathMatcher.matches(Paths.get(file.getPath())))
                listMODEL.addElement(file.getPath());
            if(file.isDirectory())
                searchFileByGlob(file, listMODEL);
        }
    } 
    
    void statistics(File Folder){
        File[] files = Folder.listFiles();
        for(File file:files)
        {
            if(file.isFile())
            {
                int k = countWord(file);
                globalCount+=k;
                showStatistics.getModel().addRow(new Object[]{file.getPath(),k});
            }
            else
                statistics(file);
        }
    }
    public static String removeCharAt(String s, int pos) {
        return s.substring(0, pos) + s.substring(pos + 1);
    }
    
    void writeFile(File file, String str){
        try(FileWriter writer = new FileWriter(file, false))
            {
               // запись всей строки
                writer.write(str);
                // запись по символам
                writer.flush();
            }
            catch(IOException ex){
                System.out.println(ex.getMessage());   
            }
    }
    
    void searchFilesByContent(File Folder, DefaultListModel listMODEL){
        File[] files = Folder.listFiles();
        for(File file:files)
        {
            if(file.isFile())
            {
                if(search(readFile(file), jTextField2.getText()))
                    listMODEL.addElement(file.getPath());
            }
            else
                searchFilesByContent(file, listMODEL);
        }
    }
    
    void searchFilesByName(File Folder, DefaultListModel listMODEL, String str){
        File[] files = Folder.listFiles();
        for(File file:files)
        {
            if(search(file.getName(), str))
                listMODEL.addElement(file.getPath());
            if(file.isDirectory())
                searchFilesByName(file, listMODEL, str);
        }
    }
    
    boolean search(String one, String two){
        for(int i=0;i<one.length()-two.length()+1;i++)
        {
            int j;
            for(j=0;(j<two.length())&&(one.charAt(j+i)==two.charAt(j));)
                j++;
            if(j==two.length())
                return true;
        }
        return false;
    } 
    
    	DefaultMutableTreeNode getTreeNode(TreePath path)
	{
                treePath=path;
		return (DefaultMutableTreeNode) (path.getLastPathComponent());
	}
 
	FileNode getFileNode(DefaultMutableTreeNode node)
	{
		if (node == null)
			return null;
		Object obj = node.getUserObject();
		if (obj instanceof IconData)
			obj = ((IconData) obj).getObject();
		if (obj instanceof FileNode)
			return (FileNode) obj;
		else
			return null;
	}
 
	class DirExpansionListener implements TreeExpansionListener
	{
		public void treeExpanded(TreeExpansionEvent event)
		{
			final DefaultMutableTreeNode node = getTreeNode(event.getPath());
			final FileNode fnode = getFileNode(node);
                        selectedFile=fnode.getFile();
			nodeToUpdate = node;
                        if (fnode != null && fnode.expand(node))  
                            m_model.reload(node);
		}
 
		public void treeCollapsed(TreeExpansionEvent event)
		{
		}
	}
 
	class DirSelectionListener implements TreeSelectionListener
	{
		public void valueChanged(TreeSelectionEvent event)
		{
			DefaultMutableTreeNode node = getTreeNode(event.getPath());
			FileNode fnode = getFileNode(node);
                        selectedFile=fnode.getFile();
                        redaction();
			if (fnode != null)
				m_display.setText(fnode.getFile().getAbsolutePath());
			else
				m_display.setText("");
		}
	}
        
        class MyListSelectionListener implements ListSelectionListener
        {
            public void valueChanged(ListSelectionEvent e) {
                if(jList1.getSelectedValue()!=null)
                {
                    File file = new File(jList1.getSelectedValue());
                    if(file.isFile())
                    {
                        selectedFile = file;
                        redaction();
                    }
                }
            }
        }
        
    public int countWord(File file){ 
            Integer count = 0; 
            int flag = 0;
            try(FileReader reader = new FileReader(file))
            {
                // читаем посимвольно
                int c;
                while((c=reader.read())!=-1){
                    if((c!='\r')&&(c!='\n')&&(c!=' ')&&(flag==0))
                    {
                        count++;
                        flag=1;
                    }
                    if(((c=='\n')||(c==' ')||(c=='\r'))&&(flag==1))
                        flag=0;
                    
                }
            }
            catch(IOException ex){
                    System.out.println(ex.getMessage());
                }
        return count;
    }
        
        public String readFile(File file){
            String s=new String("");
            try(FileReader reader = new FileReader(file))
            {
                // читаем посимвольно
                int c;
                while((c=reader.read())!=-1){
                    s+=(char)c;
                }
            }
            catch(IOException ex){
                    System.out.println(ex.getMessage());
                } 
            return s;
        }
              
        
        private void redaction(){
            if(selectedFile.isFile())
                jTextPane1.setText(readFile(selectedFile)); 
        }        
        
	public static boolean isWindows()
	{
 
		String os = System.getProperty("os.name").toLowerCase();
		return (os.indexOf("win") >= 0);
 
	}
 
	public static boolean isMac()
	{
 
		String os = System.getProperty("os.name").toLowerCase();
		return (os.indexOf("mac") >= 0);
 
	}
 
	public static boolean isUnix()
	{
 
		String os = System.getProperty("os.name").toLowerCase();
		return (os.indexOf("nix") >= 0 || os.indexOf("nux") >= 0);
 
	}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>
        /* Create and display the form */
                new MainFrame().setVisible(true);

    }

    class IconData
{
	protected Icon m_icon;
	protected Icon m_expandedIcon;
	protected Object m_data;
 
	public IconData(Icon icon, Object data)
	{
		m_icon = icon;
		m_expandedIcon = null;
		m_data = data;
	}
 
	public IconData(Icon icon, Icon expandedIcon, Object data)
	{
		m_icon = icon;
		m_expandedIcon = expandedIcon;
		m_data = data;
	}
 
	public Icon getIcon()
	{
		return m_icon;
	}
 
	public Icon getExpandedIcon()
	{
		return m_expandedIcon != null ? m_expandedIcon : m_icon;
	}
 
	public Object getObject()
	{
		return m_data;
	}
 
	public String toString()
	{
		return m_data.toString();
	}
}
 
class FileNode
{
	protected File m_file;
 
	public FileNode(File file)
	{
		m_file = file;
	}
 
	public File getFile()
	{
		return m_file;
	}
 
	public String toString()
	{
		return m_file.getName().length() > 0 ? m_file.getName() : m_file
				.getPath();
	}
 
	public boolean expand(DefaultMutableTreeNode parent)
	{
		DefaultMutableTreeNode flag = (DefaultMutableTreeNode) parent
				.getFirstChild();
		if (flag == null)
			return false;
		Object obj = flag.getUserObject();
		parent.removeAllChildren();
 
		File[] files = listFiles();
		if (files == null)
			return true;
 
		Vector<FileNode> v = new Vector<FileNode>();
 
		for (int k = 0; k < files.length; k++)
		{
			File f = files[k];
			FileNode newNode = new FileNode(f);
 
			boolean isAdded = false;
			for (int i = 0; i < v.size(); i++)
			{
				FileNode nd = (FileNode) v.elementAt(i);
				if (newNode.compareTo(nd) < 0)
				{
					v.insertElementAt(newNode, i);
					isAdded = true;
					break;
				}
			}
			if (!isAdded)
				v.addElement(newNode);
		}
 
		for (int i = 0; i < v.size(); i++)
		{
			FileNode nd = (FileNode) v.elementAt(i);
			IconData idata = new IconData(null, null, nd);
			DefaultMutableTreeNode node = new DefaultMutableTreeNode(idata);
			parent.add(node);
 
			if (nd.hasSubDirs())
				node.add(new DefaultMutableTreeNode(new Boolean(true)));
		}
 
		return true;
	}
 
	public boolean hasSubDirs()
	{
		File[] files = listFiles();
		if (files == null)
			return false;
		for (int k = 0; k < files.length; k++)
		{
			if (files[k].isDirectory())
				return true;
		}
		return true;
	}

	public int compareTo(FileNode toCompare)
	{
		return m_file.getName().compareToIgnoreCase(toCompare.m_file.getName());
	}
 
	protected File[] listFiles()
	{
		if (!m_file.isDirectory())
			return null;
		try
		{
			return m_file.listFiles();
		} catch (Exception ex)
		{
			JOptionPane.showMessageDialog(null, "Error reading directory "
					+ m_file.getAbsolutePath(), "Warning",
					JOptionPane.WARNING_MESSAGE);
			return null;
		}
	}
 
}
    Highlighter.HighlightPainter greenPainter; 

    public DefaultMutableTreeNode mainNode=null;

    public File myFileSystem=null, selectedFile=null;

    public static TreePath treePath=null;

    private static final long serialVersionUID = 5827480513659616924L;
 
    public static DefaultTreeModel m_model=null;
 
    private JPanel panel=null;
    
    Statistics showStatistics;
    
    String expansion, charset, workpath;
    
    int globalCount=0;
    
    PathMatcher pathMatcher; 
    
    FileSystem fileSystem;
 
    public static String bufName;
    public static DefaultMutableTreeNode nodeToUpdate;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField m_display;
    private javax.swing.JTree m_tree;
    // End of variables declaration//GEN-END:variables
}
